// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ru/koopey/test_keno/model/game.proto

package ru.koopey.test_keno.model;

public final class KenoGameProtobuf {
  private KenoGameProtobuf() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface KenoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Keno)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>uint64 round = 1;</code>
     */
    long getRound();

    /**
     * <code>uint32 timer = 2;</code>
     */
    int getTimer();

    /**
     * <code>repeated uint32 balls = 3;</code>
     */
    java.util.List<java.lang.Integer> getBallsList();
    /**
     * <code>repeated uint32 balls = 3;</code>
     */
    int getBallsCount();
    /**
     * <code>repeated uint32 balls = 3;</code>
     */
    int getBalls(int index);

    /**
     * <code>repeated .Keno.History history = 4;</code>
     */
    java.util.List<ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History> 
        getHistoryList();
    /**
     * <code>repeated .Keno.History history = 4;</code>
     */
    ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History getHistory(int index);
    /**
     * <code>repeated .Keno.History history = 4;</code>
     */
    int getHistoryCount();
    /**
     * <code>repeated .Keno.History history = 4;</code>
     */
    java.util.List<? extends ru.koopey.test_keno.model.KenoGameProtobuf.Keno.HistoryOrBuilder> 
        getHistoryOrBuilderList();
    /**
     * <code>repeated .Keno.History history = 4;</code>
     */
    ru.koopey.test_keno.model.KenoGameProtobuf.Keno.HistoryOrBuilder getHistoryOrBuilder(
        int index);

    /**
     * <code>repeated .Keno.Rate rate = 5;</code>
     */
    java.util.List<ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate> 
        getRateList();
    /**
     * <code>repeated .Keno.Rate rate = 5;</code>
     */
    ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate getRate(int index);
    /**
     * <code>repeated .Keno.Rate rate = 5;</code>
     */
    int getRateCount();
    /**
     * <code>repeated .Keno.Rate rate = 5;</code>
     */
    java.util.List<? extends ru.koopey.test_keno.model.KenoGameProtobuf.Keno.RateOrBuilder> 
        getRateOrBuilderList();
    /**
     * <code>repeated .Keno.Rate rate = 5;</code>
     */
    ru.koopey.test_keno.model.KenoGameProtobuf.Keno.RateOrBuilder getRateOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code Keno}
   */
  public  static final class Keno extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Keno)
      KenoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Keno.newBuilder() to construct.
    private Keno(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Keno() {
      round_ = 0L;
      timer_ = 0;
      balls_ = java.util.Collections.emptyList();
      history_ = java.util.Collections.emptyList();
      rate_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Keno(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              round_ = input.readUInt64();
              break;
            }
            case 16: {

              timer_ = input.readUInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                balls_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              balls_.add(input.readUInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                balls_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                balls_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                history_ = new java.util.ArrayList<ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History>();
                mutable_bitField0_ |= 0x00000008;
              }
              history_.add(
                  input.readMessage(ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History.parser(), extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                rate_ = new java.util.ArrayList<ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate>();
                mutable_bitField0_ |= 0x00000010;
              }
              rate_.add(
                  input.readMessage(ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          balls_ = java.util.Collections.unmodifiableList(balls_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          history_ = java.util.Collections.unmodifiableList(history_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          rate_ = java.util.Collections.unmodifiableList(rate_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ru.koopey.test_keno.model.KenoGameProtobuf.internal_static_Keno_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ru.koopey.test_keno.model.KenoGameProtobuf.internal_static_Keno_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ru.koopey.test_keno.model.KenoGameProtobuf.Keno.class, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Builder.class);
    }

    public interface HistoryOrBuilder extends
        // @@protoc_insertion_point(interface_extends:Keno.History)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>uint64 id = 1;</code>
       */
      long getId();

      /**
       * <code>string ball = 2;</code>
       */
      java.lang.String getBall();
      /**
       * <code>string ball = 2;</code>
       */
      com.google.protobuf.ByteString
          getBallBytes();
    }
    /**
     * Protobuf type {@code Keno.History}
     */
    public  static final class History extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:Keno.History)
        HistoryOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use History.newBuilder() to construct.
      private History(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private History() {
        id_ = 0L;
        ball_ = "";
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private History(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {

                id_ = input.readUInt64();
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                ball_ = s;
                break;
              }
              default: {
                if (!parseUnknownFieldProto3(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.koopey.test_keno.model.KenoGameProtobuf.internal_static_Keno_History_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.koopey.test_keno.model.KenoGameProtobuf.internal_static_Keno_History_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History.class, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History.Builder.class);
      }

      public static final int ID_FIELD_NUMBER = 1;
      private long id_;
      /**
       * <code>uint64 id = 1;</code>
       */
      public long getId() {
        return id_;
      }

      public static final int BALL_FIELD_NUMBER = 2;
      private volatile java.lang.Object ball_;
      /**
       * <code>string ball = 2;</code>
       */
      public java.lang.String getBall() {
        java.lang.Object ref = ball_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          ball_ = s;
          return s;
        }
      }
      /**
       * <code>string ball = 2;</code>
       */
      public com.google.protobuf.ByteString
          getBallBytes() {
        java.lang.Object ref = ball_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          ball_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (id_ != 0L) {
          output.writeUInt64(1, id_);
        }
        if (!getBallBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, ball_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (id_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(1, id_);
        }
        if (!getBallBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, ball_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History)) {
          return super.equals(obj);
        }
        ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History other = (ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History) obj;

        boolean result = true;
        result = result && (getId()
            == other.getId());
        result = result && getBall()
            .equals(other.getBall());
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getId());
        hash = (37 * hash) + BALL_FIELD_NUMBER;
        hash = (53 * hash) + getBall().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code Keno.History}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:Keno.History)
          ru.koopey.test_keno.model.KenoGameProtobuf.Keno.HistoryOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.koopey.test_keno.model.KenoGameProtobuf.internal_static_Keno_History_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.koopey.test_keno.model.KenoGameProtobuf.internal_static_Keno_History_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History.class, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History.Builder.class);
        }

        // Construct using ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          id_ = 0L;

          ball_ = "";

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.koopey.test_keno.model.KenoGameProtobuf.internal_static_Keno_History_descriptor;
        }

        @java.lang.Override
        public ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History getDefaultInstanceForType() {
          return ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History.getDefaultInstance();
        }

        @java.lang.Override
        public ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History build() {
          ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History buildPartial() {
          ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History result = new ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History(this);
          result.id_ = id_;
          result.ball_ = ball_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return (Builder) super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History) {
            return mergeFrom((ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History other) {
          if (other == ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History.getDefaultInstance()) return this;
          if (other.getId() != 0L) {
            setId(other.getId());
          }
          if (!other.getBall().isEmpty()) {
            ball_ = other.ball_;
            onChanged();
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private long id_ ;
        /**
         * <code>uint64 id = 1;</code>
         */
        public long getId() {
          return id_;
        }
        /**
         * <code>uint64 id = 1;</code>
         */
        public Builder setId(long value) {
          
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>uint64 id = 1;</code>
         */
        public Builder clearId() {
          
          id_ = 0L;
          onChanged();
          return this;
        }

        private java.lang.Object ball_ = "";
        /**
         * <code>string ball = 2;</code>
         */
        public java.lang.String getBall() {
          java.lang.Object ref = ball_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            ball_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string ball = 2;</code>
         */
        public com.google.protobuf.ByteString
            getBallBytes() {
          java.lang.Object ref = ball_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            ball_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string ball = 2;</code>
         */
        public Builder setBall(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          ball_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string ball = 2;</code>
         */
        public Builder clearBall() {
          
          ball_ = getDefaultInstance().getBall();
          onChanged();
          return this;
        }
        /**
         * <code>string ball = 2;</code>
         */
        public Builder setBallBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          ball_ = value;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFieldsProto3(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:Keno.History)
      }

      // @@protoc_insertion_point(class_scope:Keno.History)
      private static final ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History();
      }

      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<History>
          PARSER = new com.google.protobuf.AbstractParser<History>() {
        @java.lang.Override
        public History parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new History(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<History> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<History> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface RateOrBuilder extends
        // @@protoc_insertion_point(interface_extends:Keno.Rate)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>uint64 round = 1;</code>
       */
      long getRound();

      /**
       * <code>string ball = 2;</code>
       */
      java.lang.String getBall();
      /**
       * <code>string ball = 2;</code>
       */
      com.google.protobuf.ByteString
          getBallBytes();

      /**
       * <code>uint64 rate = 3;</code>
       */
      long getRate();

      /**
       * <code>uint64 win = 4;</code>
       */
      long getWin();
    }
    /**
     * Protobuf type {@code Keno.Rate}
     */
    public  static final class Rate extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:Keno.Rate)
        RateOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Rate.newBuilder() to construct.
      private Rate(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Rate() {
        round_ = 0L;
        ball_ = "";
        rate_ = 0L;
        win_ = 0L;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Rate(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {

                round_ = input.readUInt64();
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                ball_ = s;
                break;
              }
              case 24: {

                rate_ = input.readUInt64();
                break;
              }
              case 32: {

                win_ = input.readUInt64();
                break;
              }
              default: {
                if (!parseUnknownFieldProto3(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.koopey.test_keno.model.KenoGameProtobuf.internal_static_Keno_Rate_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.koopey.test_keno.model.KenoGameProtobuf.internal_static_Keno_Rate_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate.class, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate.Builder.class);
      }

      public static final int ROUND_FIELD_NUMBER = 1;
      private long round_;
      /**
       * <code>uint64 round = 1;</code>
       */
      public long getRound() {
        return round_;
      }

      public static final int BALL_FIELD_NUMBER = 2;
      private volatile java.lang.Object ball_;
      /**
       * <code>string ball = 2;</code>
       */
      public java.lang.String getBall() {
        java.lang.Object ref = ball_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          ball_ = s;
          return s;
        }
      }
      /**
       * <code>string ball = 2;</code>
       */
      public com.google.protobuf.ByteString
          getBallBytes() {
        java.lang.Object ref = ball_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          ball_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int RATE_FIELD_NUMBER = 3;
      private long rate_;
      /**
       * <code>uint64 rate = 3;</code>
       */
      public long getRate() {
        return rate_;
      }

      public static final int WIN_FIELD_NUMBER = 4;
      private long win_;
      /**
       * <code>uint64 win = 4;</code>
       */
      public long getWin() {
        return win_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (round_ != 0L) {
          output.writeUInt64(1, round_);
        }
        if (!getBallBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, ball_);
        }
        if (rate_ != 0L) {
          output.writeUInt64(3, rate_);
        }
        if (win_ != 0L) {
          output.writeUInt64(4, win_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (round_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(1, round_);
        }
        if (!getBallBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, ball_);
        }
        if (rate_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(3, rate_);
        }
        if (win_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(4, win_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate)) {
          return super.equals(obj);
        }
        ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate other = (ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate) obj;

        boolean result = true;
        result = result && (getRound()
            == other.getRound());
        result = result && getBall()
            .equals(other.getBall());
        result = result && (getRate()
            == other.getRate());
        result = result && (getWin()
            == other.getWin());
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + ROUND_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getRound());
        hash = (37 * hash) + BALL_FIELD_NUMBER;
        hash = (53 * hash) + getBall().hashCode();
        hash = (37 * hash) + RATE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getRate());
        hash = (37 * hash) + WIN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getWin());
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code Keno.Rate}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:Keno.Rate)
          ru.koopey.test_keno.model.KenoGameProtobuf.Keno.RateOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ru.koopey.test_keno.model.KenoGameProtobuf.internal_static_Keno_Rate_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ru.koopey.test_keno.model.KenoGameProtobuf.internal_static_Keno_Rate_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate.class, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate.Builder.class);
        }

        // Construct using ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          round_ = 0L;

          ball_ = "";

          rate_ = 0L;

          win_ = 0L;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ru.koopey.test_keno.model.KenoGameProtobuf.internal_static_Keno_Rate_descriptor;
        }

        @java.lang.Override
        public ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate getDefaultInstanceForType() {
          return ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate.getDefaultInstance();
        }

        @java.lang.Override
        public ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate build() {
          ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate buildPartial() {
          ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate result = new ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate(this);
          result.round_ = round_;
          result.ball_ = ball_;
          result.rate_ = rate_;
          result.win_ = win_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return (Builder) super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate) {
            return mergeFrom((ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate other) {
          if (other == ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate.getDefaultInstance()) return this;
          if (other.getRound() != 0L) {
            setRound(other.getRound());
          }
          if (!other.getBall().isEmpty()) {
            ball_ = other.ball_;
            onChanged();
          }
          if (other.getRate() != 0L) {
            setRate(other.getRate());
          }
          if (other.getWin() != 0L) {
            setWin(other.getWin());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private long round_ ;
        /**
         * <code>uint64 round = 1;</code>
         */
        public long getRound() {
          return round_;
        }
        /**
         * <code>uint64 round = 1;</code>
         */
        public Builder setRound(long value) {
          
          round_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>uint64 round = 1;</code>
         */
        public Builder clearRound() {
          
          round_ = 0L;
          onChanged();
          return this;
        }

        private java.lang.Object ball_ = "";
        /**
         * <code>string ball = 2;</code>
         */
        public java.lang.String getBall() {
          java.lang.Object ref = ball_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            ball_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string ball = 2;</code>
         */
        public com.google.protobuf.ByteString
            getBallBytes() {
          java.lang.Object ref = ball_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            ball_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string ball = 2;</code>
         */
        public Builder setBall(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          ball_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string ball = 2;</code>
         */
        public Builder clearBall() {
          
          ball_ = getDefaultInstance().getBall();
          onChanged();
          return this;
        }
        /**
         * <code>string ball = 2;</code>
         */
        public Builder setBallBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          ball_ = value;
          onChanged();
          return this;
        }

        private long rate_ ;
        /**
         * <code>uint64 rate = 3;</code>
         */
        public long getRate() {
          return rate_;
        }
        /**
         * <code>uint64 rate = 3;</code>
         */
        public Builder setRate(long value) {
          
          rate_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>uint64 rate = 3;</code>
         */
        public Builder clearRate() {
          
          rate_ = 0L;
          onChanged();
          return this;
        }

        private long win_ ;
        /**
         * <code>uint64 win = 4;</code>
         */
        public long getWin() {
          return win_;
        }
        /**
         * <code>uint64 win = 4;</code>
         */
        public Builder setWin(long value) {
          
          win_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>uint64 win = 4;</code>
         */
        public Builder clearWin() {
          
          win_ = 0L;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFieldsProto3(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:Keno.Rate)
      }

      // @@protoc_insertion_point(class_scope:Keno.Rate)
      private static final ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate();
      }

      public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Rate>
          PARSER = new com.google.protobuf.AbstractParser<Rate>() {
        @java.lang.Override
        public Rate parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Rate(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Rate> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Rate> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int ROUND_FIELD_NUMBER = 1;
    private long round_;
    /**
     * <code>uint64 round = 1;</code>
     */
    public long getRound() {
      return round_;
    }

    public static final int TIMER_FIELD_NUMBER = 2;
    private int timer_;
    /**
     * <code>uint32 timer = 2;</code>
     */
    public int getTimer() {
      return timer_;
    }

    public static final int BALLS_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> balls_;
    /**
     * <code>repeated uint32 balls = 3;</code>
     */
    public java.util.List<java.lang.Integer>
        getBallsList() {
      return balls_;
    }
    /**
     * <code>repeated uint32 balls = 3;</code>
     */
    public int getBallsCount() {
      return balls_.size();
    }
    /**
     * <code>repeated uint32 balls = 3;</code>
     */
    public int getBalls(int index) {
      return balls_.get(index);
    }
    private int ballsMemoizedSerializedSize = -1;

    public static final int HISTORY_FIELD_NUMBER = 4;
    private java.util.List<ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History> history_;
    /**
     * <code>repeated .Keno.History history = 4;</code>
     */
    public java.util.List<ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History> getHistoryList() {
      return history_;
    }
    /**
     * <code>repeated .Keno.History history = 4;</code>
     */
    public java.util.List<? extends ru.koopey.test_keno.model.KenoGameProtobuf.Keno.HistoryOrBuilder> 
        getHistoryOrBuilderList() {
      return history_;
    }
    /**
     * <code>repeated .Keno.History history = 4;</code>
     */
    public int getHistoryCount() {
      return history_.size();
    }
    /**
     * <code>repeated .Keno.History history = 4;</code>
     */
    public ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History getHistory(int index) {
      return history_.get(index);
    }
    /**
     * <code>repeated .Keno.History history = 4;</code>
     */
    public ru.koopey.test_keno.model.KenoGameProtobuf.Keno.HistoryOrBuilder getHistoryOrBuilder(
        int index) {
      return history_.get(index);
    }

    public static final int RATE_FIELD_NUMBER = 5;
    private java.util.List<ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate> rate_;
    /**
     * <code>repeated .Keno.Rate rate = 5;</code>
     */
    public java.util.List<ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate> getRateList() {
      return rate_;
    }
    /**
     * <code>repeated .Keno.Rate rate = 5;</code>
     */
    public java.util.List<? extends ru.koopey.test_keno.model.KenoGameProtobuf.Keno.RateOrBuilder> 
        getRateOrBuilderList() {
      return rate_;
    }
    /**
     * <code>repeated .Keno.Rate rate = 5;</code>
     */
    public int getRateCount() {
      return rate_.size();
    }
    /**
     * <code>repeated .Keno.Rate rate = 5;</code>
     */
    public ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate getRate(int index) {
      return rate_.get(index);
    }
    /**
     * <code>repeated .Keno.Rate rate = 5;</code>
     */
    public ru.koopey.test_keno.model.KenoGameProtobuf.Keno.RateOrBuilder getRateOrBuilder(
        int index) {
      return rate_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (round_ != 0L) {
        output.writeUInt64(1, round_);
      }
      if (timer_ != 0) {
        output.writeUInt32(2, timer_);
      }
      if (getBallsList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(ballsMemoizedSerializedSize);
      }
      for (int i = 0; i < balls_.size(); i++) {
        output.writeUInt32NoTag(balls_.get(i));
      }
      for (int i = 0; i < history_.size(); i++) {
        output.writeMessage(4, history_.get(i));
      }
      for (int i = 0; i < rate_.size(); i++) {
        output.writeMessage(5, rate_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (round_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, round_);
      }
      if (timer_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, timer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < balls_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(balls_.get(i));
        }
        size += dataSize;
        if (!getBallsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        ballsMemoizedSerializedSize = dataSize;
      }
      for (int i = 0; i < history_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, history_.get(i));
      }
      for (int i = 0; i < rate_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, rate_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof ru.koopey.test_keno.model.KenoGameProtobuf.Keno)) {
        return super.equals(obj);
      }
      ru.koopey.test_keno.model.KenoGameProtobuf.Keno other = (ru.koopey.test_keno.model.KenoGameProtobuf.Keno) obj;

      boolean result = true;
      result = result && (getRound()
          == other.getRound());
      result = result && (getTimer()
          == other.getTimer());
      result = result && getBallsList()
          .equals(other.getBallsList());
      result = result && getHistoryList()
          .equals(other.getHistoryList());
      result = result && getRateList()
          .equals(other.getRateList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ROUND_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getRound());
      hash = (37 * hash) + TIMER_FIELD_NUMBER;
      hash = (53 * hash) + getTimer();
      if (getBallsCount() > 0) {
        hash = (37 * hash) + BALLS_FIELD_NUMBER;
        hash = (53 * hash) + getBallsList().hashCode();
      }
      if (getHistoryCount() > 0) {
        hash = (37 * hash) + HISTORY_FIELD_NUMBER;
        hash = (53 * hash) + getHistoryList().hashCode();
      }
      if (getRateCount() > 0) {
        hash = (37 * hash) + RATE_FIELD_NUMBER;
        hash = (53 * hash) + getRateList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(ru.koopey.test_keno.model.KenoGameProtobuf.Keno prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Keno}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Keno)
        ru.koopey.test_keno.model.KenoGameProtobuf.KenoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ru.koopey.test_keno.model.KenoGameProtobuf.internal_static_Keno_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ru.koopey.test_keno.model.KenoGameProtobuf.internal_static_Keno_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ru.koopey.test_keno.model.KenoGameProtobuf.Keno.class, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Builder.class);
      }

      // Construct using ru.koopey.test_keno.model.KenoGameProtobuf.Keno.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getHistoryFieldBuilder();
          getRateFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        round_ = 0L;

        timer_ = 0;

        balls_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        if (historyBuilder_ == null) {
          history_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          historyBuilder_.clear();
        }
        if (rateBuilder_ == null) {
          rate_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          rateBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ru.koopey.test_keno.model.KenoGameProtobuf.internal_static_Keno_descriptor;
      }

      @java.lang.Override
      public ru.koopey.test_keno.model.KenoGameProtobuf.Keno getDefaultInstanceForType() {
        return ru.koopey.test_keno.model.KenoGameProtobuf.Keno.getDefaultInstance();
      }

      @java.lang.Override
      public ru.koopey.test_keno.model.KenoGameProtobuf.Keno build() {
        ru.koopey.test_keno.model.KenoGameProtobuf.Keno result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public ru.koopey.test_keno.model.KenoGameProtobuf.Keno buildPartial() {
        ru.koopey.test_keno.model.KenoGameProtobuf.Keno result = new ru.koopey.test_keno.model.KenoGameProtobuf.Keno(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.round_ = round_;
        result.timer_ = timer_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          balls_ = java.util.Collections.unmodifiableList(balls_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.balls_ = balls_;
        if (historyBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            history_ = java.util.Collections.unmodifiableList(history_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.history_ = history_;
        } else {
          result.history_ = historyBuilder_.build();
        }
        if (rateBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            rate_ = java.util.Collections.unmodifiableList(rate_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.rate_ = rate_;
        } else {
          result.rate_ = rateBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ru.koopey.test_keno.model.KenoGameProtobuf.Keno) {
          return mergeFrom((ru.koopey.test_keno.model.KenoGameProtobuf.Keno)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ru.koopey.test_keno.model.KenoGameProtobuf.Keno other) {
        if (other == ru.koopey.test_keno.model.KenoGameProtobuf.Keno.getDefaultInstance()) return this;
        if (other.getRound() != 0L) {
          setRound(other.getRound());
        }
        if (other.getTimer() != 0) {
          setTimer(other.getTimer());
        }
        if (!other.balls_.isEmpty()) {
          if (balls_.isEmpty()) {
            balls_ = other.balls_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureBallsIsMutable();
            balls_.addAll(other.balls_);
          }
          onChanged();
        }
        if (historyBuilder_ == null) {
          if (!other.history_.isEmpty()) {
            if (history_.isEmpty()) {
              history_ = other.history_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureHistoryIsMutable();
              history_.addAll(other.history_);
            }
            onChanged();
          }
        } else {
          if (!other.history_.isEmpty()) {
            if (historyBuilder_.isEmpty()) {
              historyBuilder_.dispose();
              historyBuilder_ = null;
              history_ = other.history_;
              bitField0_ = (bitField0_ & ~0x00000008);
              historyBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getHistoryFieldBuilder() : null;
            } else {
              historyBuilder_.addAllMessages(other.history_);
            }
          }
        }
        if (rateBuilder_ == null) {
          if (!other.rate_.isEmpty()) {
            if (rate_.isEmpty()) {
              rate_ = other.rate_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureRateIsMutable();
              rate_.addAll(other.rate_);
            }
            onChanged();
          }
        } else {
          if (!other.rate_.isEmpty()) {
            if (rateBuilder_.isEmpty()) {
              rateBuilder_.dispose();
              rateBuilder_ = null;
              rate_ = other.rate_;
              bitField0_ = (bitField0_ & ~0x00000010);
              rateBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getRateFieldBuilder() : null;
            } else {
              rateBuilder_.addAllMessages(other.rate_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ru.koopey.test_keno.model.KenoGameProtobuf.Keno parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ru.koopey.test_keno.model.KenoGameProtobuf.Keno) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long round_ ;
      /**
       * <code>uint64 round = 1;</code>
       */
      public long getRound() {
        return round_;
      }
      /**
       * <code>uint64 round = 1;</code>
       */
      public Builder setRound(long value) {
        
        round_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 round = 1;</code>
       */
      public Builder clearRound() {
        
        round_ = 0L;
        onChanged();
        return this;
      }

      private int timer_ ;
      /**
       * <code>uint32 timer = 2;</code>
       */
      public int getTimer() {
        return timer_;
      }
      /**
       * <code>uint32 timer = 2;</code>
       */
      public Builder setTimer(int value) {
        
        timer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 timer = 2;</code>
       */
      public Builder clearTimer() {
        
        timer_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> balls_ = java.util.Collections.emptyList();
      private void ensureBallsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          balls_ = new java.util.ArrayList<java.lang.Integer>(balls_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated uint32 balls = 3;</code>
       */
      public java.util.List<java.lang.Integer>
          getBallsList() {
        return java.util.Collections.unmodifiableList(balls_);
      }
      /**
       * <code>repeated uint32 balls = 3;</code>
       */
      public int getBallsCount() {
        return balls_.size();
      }
      /**
       * <code>repeated uint32 balls = 3;</code>
       */
      public int getBalls(int index) {
        return balls_.get(index);
      }
      /**
       * <code>repeated uint32 balls = 3;</code>
       */
      public Builder setBalls(
          int index, int value) {
        ensureBallsIsMutable();
        balls_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 balls = 3;</code>
       */
      public Builder addBalls(int value) {
        ensureBallsIsMutable();
        balls_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 balls = 3;</code>
       */
      public Builder addAllBalls(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBallsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, balls_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 balls = 3;</code>
       */
      public Builder clearBalls() {
        balls_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private java.util.List<ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History> history_ =
        java.util.Collections.emptyList();
      private void ensureHistoryIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          history_ = new java.util.ArrayList<ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History>(history_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History.Builder, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.HistoryOrBuilder> historyBuilder_;

      /**
       * <code>repeated .Keno.History history = 4;</code>
       */
      public java.util.List<ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History> getHistoryList() {
        if (historyBuilder_ == null) {
          return java.util.Collections.unmodifiableList(history_);
        } else {
          return historyBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Keno.History history = 4;</code>
       */
      public int getHistoryCount() {
        if (historyBuilder_ == null) {
          return history_.size();
        } else {
          return historyBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Keno.History history = 4;</code>
       */
      public ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History getHistory(int index) {
        if (historyBuilder_ == null) {
          return history_.get(index);
        } else {
          return historyBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Keno.History history = 4;</code>
       */
      public Builder setHistory(
          int index, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History value) {
        if (historyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHistoryIsMutable();
          history_.set(index, value);
          onChanged();
        } else {
          historyBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Keno.History history = 4;</code>
       */
      public Builder setHistory(
          int index, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History.Builder builderForValue) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.set(index, builderForValue.build());
          onChanged();
        } else {
          historyBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Keno.History history = 4;</code>
       */
      public Builder addHistory(ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History value) {
        if (historyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHistoryIsMutable();
          history_.add(value);
          onChanged();
        } else {
          historyBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Keno.History history = 4;</code>
       */
      public Builder addHistory(
          int index, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History value) {
        if (historyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHistoryIsMutable();
          history_.add(index, value);
          onChanged();
        } else {
          historyBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Keno.History history = 4;</code>
       */
      public Builder addHistory(
          ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History.Builder builderForValue) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.add(builderForValue.build());
          onChanged();
        } else {
          historyBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Keno.History history = 4;</code>
       */
      public Builder addHistory(
          int index, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History.Builder builderForValue) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.add(index, builderForValue.build());
          onChanged();
        } else {
          historyBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Keno.History history = 4;</code>
       */
      public Builder addAllHistory(
          java.lang.Iterable<? extends ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History> values) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, history_);
          onChanged();
        } else {
          historyBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Keno.History history = 4;</code>
       */
      public Builder clearHistory() {
        if (historyBuilder_ == null) {
          history_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          historyBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Keno.History history = 4;</code>
       */
      public Builder removeHistory(int index) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.remove(index);
          onChanged();
        } else {
          historyBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Keno.History history = 4;</code>
       */
      public ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History.Builder getHistoryBuilder(
          int index) {
        return getHistoryFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Keno.History history = 4;</code>
       */
      public ru.koopey.test_keno.model.KenoGameProtobuf.Keno.HistoryOrBuilder getHistoryOrBuilder(
          int index) {
        if (historyBuilder_ == null) {
          return history_.get(index);  } else {
          return historyBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Keno.History history = 4;</code>
       */
      public java.util.List<? extends ru.koopey.test_keno.model.KenoGameProtobuf.Keno.HistoryOrBuilder> 
           getHistoryOrBuilderList() {
        if (historyBuilder_ != null) {
          return historyBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(history_);
        }
      }
      /**
       * <code>repeated .Keno.History history = 4;</code>
       */
      public ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History.Builder addHistoryBuilder() {
        return getHistoryFieldBuilder().addBuilder(
            ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History.getDefaultInstance());
      }
      /**
       * <code>repeated .Keno.History history = 4;</code>
       */
      public ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History.Builder addHistoryBuilder(
          int index) {
        return getHistoryFieldBuilder().addBuilder(
            index, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History.getDefaultInstance());
      }
      /**
       * <code>repeated .Keno.History history = 4;</code>
       */
      public java.util.List<ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History.Builder> 
           getHistoryBuilderList() {
        return getHistoryFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History.Builder, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.HistoryOrBuilder> 
          getHistoryFieldBuilder() {
        if (historyBuilder_ == null) {
          historyBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.History.Builder, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.HistoryOrBuilder>(
                  history_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          history_ = null;
        }
        return historyBuilder_;
      }

      private java.util.List<ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate> rate_ =
        java.util.Collections.emptyList();
      private void ensureRateIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          rate_ = new java.util.ArrayList<ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate>(rate_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate.Builder, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.RateOrBuilder> rateBuilder_;

      /**
       * <code>repeated .Keno.Rate rate = 5;</code>
       */
      public java.util.List<ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate> getRateList() {
        if (rateBuilder_ == null) {
          return java.util.Collections.unmodifiableList(rate_);
        } else {
          return rateBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Keno.Rate rate = 5;</code>
       */
      public int getRateCount() {
        if (rateBuilder_ == null) {
          return rate_.size();
        } else {
          return rateBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Keno.Rate rate = 5;</code>
       */
      public ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate getRate(int index) {
        if (rateBuilder_ == null) {
          return rate_.get(index);
        } else {
          return rateBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Keno.Rate rate = 5;</code>
       */
      public Builder setRate(
          int index, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate value) {
        if (rateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRateIsMutable();
          rate_.set(index, value);
          onChanged();
        } else {
          rateBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Keno.Rate rate = 5;</code>
       */
      public Builder setRate(
          int index, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate.Builder builderForValue) {
        if (rateBuilder_ == null) {
          ensureRateIsMutable();
          rate_.set(index, builderForValue.build());
          onChanged();
        } else {
          rateBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Keno.Rate rate = 5;</code>
       */
      public Builder addRate(ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate value) {
        if (rateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRateIsMutable();
          rate_.add(value);
          onChanged();
        } else {
          rateBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Keno.Rate rate = 5;</code>
       */
      public Builder addRate(
          int index, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate value) {
        if (rateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRateIsMutable();
          rate_.add(index, value);
          onChanged();
        } else {
          rateBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Keno.Rate rate = 5;</code>
       */
      public Builder addRate(
          ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate.Builder builderForValue) {
        if (rateBuilder_ == null) {
          ensureRateIsMutable();
          rate_.add(builderForValue.build());
          onChanged();
        } else {
          rateBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Keno.Rate rate = 5;</code>
       */
      public Builder addRate(
          int index, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate.Builder builderForValue) {
        if (rateBuilder_ == null) {
          ensureRateIsMutable();
          rate_.add(index, builderForValue.build());
          onChanged();
        } else {
          rateBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Keno.Rate rate = 5;</code>
       */
      public Builder addAllRate(
          java.lang.Iterable<? extends ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate> values) {
        if (rateBuilder_ == null) {
          ensureRateIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, rate_);
          onChanged();
        } else {
          rateBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Keno.Rate rate = 5;</code>
       */
      public Builder clearRate() {
        if (rateBuilder_ == null) {
          rate_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          rateBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Keno.Rate rate = 5;</code>
       */
      public Builder removeRate(int index) {
        if (rateBuilder_ == null) {
          ensureRateIsMutable();
          rate_.remove(index);
          onChanged();
        } else {
          rateBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Keno.Rate rate = 5;</code>
       */
      public ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate.Builder getRateBuilder(
          int index) {
        return getRateFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Keno.Rate rate = 5;</code>
       */
      public ru.koopey.test_keno.model.KenoGameProtobuf.Keno.RateOrBuilder getRateOrBuilder(
          int index) {
        if (rateBuilder_ == null) {
          return rate_.get(index);  } else {
          return rateBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Keno.Rate rate = 5;</code>
       */
      public java.util.List<? extends ru.koopey.test_keno.model.KenoGameProtobuf.Keno.RateOrBuilder> 
           getRateOrBuilderList() {
        if (rateBuilder_ != null) {
          return rateBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(rate_);
        }
      }
      /**
       * <code>repeated .Keno.Rate rate = 5;</code>
       */
      public ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate.Builder addRateBuilder() {
        return getRateFieldBuilder().addBuilder(
            ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate.getDefaultInstance());
      }
      /**
       * <code>repeated .Keno.Rate rate = 5;</code>
       */
      public ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate.Builder addRateBuilder(
          int index) {
        return getRateFieldBuilder().addBuilder(
            index, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate.getDefaultInstance());
      }
      /**
       * <code>repeated .Keno.Rate rate = 5;</code>
       */
      public java.util.List<ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate.Builder> 
           getRateBuilderList() {
        return getRateFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate.Builder, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.RateOrBuilder> 
          getRateFieldBuilder() {
        if (rateBuilder_ == null) {
          rateBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.Rate.Builder, ru.koopey.test_keno.model.KenoGameProtobuf.Keno.RateOrBuilder>(
                  rate_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          rate_ = null;
        }
        return rateBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Keno)
    }

    // @@protoc_insertion_point(class_scope:Keno)
    private static final ru.koopey.test_keno.model.KenoGameProtobuf.Keno DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ru.koopey.test_keno.model.KenoGameProtobuf.Keno();
    }

    public static ru.koopey.test_keno.model.KenoGameProtobuf.Keno getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Keno>
        PARSER = new com.google.protobuf.AbstractParser<Keno>() {
      @java.lang.Override
      public Keno parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Keno(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Keno> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Keno> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public ru.koopey.test_keno.model.KenoGameProtobuf.Keno getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Keno_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Keno_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Keno_History_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Keno_History_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Keno_Rate_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Keno_Rate_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n$ru/koopey/test_keno/model/game.proto\"\322" +
      "\001\n\004Keno\022\r\n\005round\030\001 \001(\004\022\r\n\005timer\030\002 \001(\r\022\r\n" +
      "\005balls\030\003 \003(\r\022\036\n\007history\030\004 \003(\0132\r.Keno.His" +
      "tory\022\030\n\004rate\030\005 \003(\0132\n.Keno.Rate\032#\n\007Histor" +
      "y\022\n\n\002id\030\001 \001(\004\022\014\n\004ball\030\002 \001(\t\032>\n\004Rate\022\r\n\005r" +
      "ound\030\001 \001(\004\022\014\n\004ball\030\002 \001(\t\022\014\n\004rate\030\003 \001(\004\022\013" +
      "\n\003win\030\004 \001(\004B-\n\031ru.koopey.test_keno.model" +
      "B\020KenoGameProtobufb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_Keno_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_Keno_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Keno_descriptor,
        new java.lang.String[] { "Round", "Timer", "Balls", "History", "Rate", });
    internal_static_Keno_History_descriptor =
      internal_static_Keno_descriptor.getNestedTypes().get(0);
    internal_static_Keno_History_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Keno_History_descriptor,
        new java.lang.String[] { "Id", "Ball", });
    internal_static_Keno_Rate_descriptor =
      internal_static_Keno_descriptor.getNestedTypes().get(1);
    internal_static_Keno_Rate_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Keno_Rate_descriptor,
        new java.lang.String[] { "Round", "Ball", "Rate", "Win", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
